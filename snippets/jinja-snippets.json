{
    // Jinja Base HTML Template
    "jinja HTML template": {
        "prefix": "j.html",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "<head>",
            "\t{% block head %}",
            "\t\t<link rel=\"stylesheet\" href=\"style.css\" />",
            "\t\t<title>{% block title %}{% endblock %} - My Webpage</title>",
            "\t{% endblock %}",
            "</head>",
            "<body>",
            "\t<div id=\"content\">{% block content %}{% endblock %}</div>",
            "\t<div id=\"footer\">",
            "\t\t{% block footer %}",
            "\t\t\t&copy; Copyright 2024 by <a href=\"https://hackerwasii.com/\">Waseem AkramðŸ’™</a>.",
            "\t\t{% endblock %}",
            "\t</div>",
            "</body>",
            "</html>"
        ],
        "description": "Jinja Base HTML Template"
    },
    // Jinja Base HTML Template with Bootstrap
    "jinja HTML template with Bootstrap": {
        "prefix": "j.html-bootstrap",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "<head>",
            "\t{% block head %}",
            "\t\t<meta charset=\"UTF-8\">",
            "\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "\t\t<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">",
            "\t\t<title>{% block title %}{% endblock %} - My Webpage</title>",
            "\t{% endblock %}",
            "</head>",
            "<body>",
            "\t<div id=\"content\">{% block content %}{% endblock %}</div>",
            "\t<div id=\"footer\">",
            "\t\t{% block footer %}",
            "\t\t\t&copy; Copyright 2024 by <a href=\"https://hackerwasii.com/\">Waseem AkramðŸ’™</a>.",
            "\t\t{% endblock %}",
            "\t</div>",
            "\t<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>",
            "\t<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.1/dist/umd/popper.min.js\"></script>",
            "\t<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>",
            "</body>",
            "</html>"
        ],
        "description": "Jinja Base HTML Template with Bootstrap"
    },
    // Jinja Base HTML Template with Bootstrap and Font Awesome
    "jinja HTML template with Bootstrap and Font Awesome": {
        "prefix": "j.html-bootstrap-fa",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "<head>",
            "\t{% block head %}",
            "\t\t<meta charset=\"UTF-8\">",
            "\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "\t\t<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">",
            "\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\">",
            "\t\t<title>{% block title %}{% endblock %} - My Webpage</title>",
            "\t{% endblock %}",
            "</head>",
            "<body>",
            "\t<div id=\"content\">{% block content %}{% endblock %}</div>",
            "\t<div id=\"footer\">",
            "\t\t{% block footer %}",
            "\t\t\t&copy; 2024 by <a href=\"https://hackerwasii.com/\">Waseem AkramðŸ’™</a>.",
            "\t\t{% endblock %}",
            "\t</div>",
            "\t<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>",
            "\t<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.1/dist/umd/popper.min.js\"></script>",
            "\t<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>",
            "</body>",
            "</html>"
        ],
        "description": "Jinja Base HTML Template with Bootstrap and Font Awesome"
    },
    // Jinja Child Template
    "jinja Child Template": {
        "prefix": "j.child",
        "body": [
            "{% extends \"base.html\" %}",
            "{% block title %}Index{% endblock %}",
            "{% block head %}",
            "    {{ super() }}",
            "    <style type=\"text/css\">",
            "        .important { color: #336699; }",
            "    </style>",
            "{% endblock %}",
            "{% block content %}",
            "    <h1>Index</h1>",
            "    <p class=\"important\">",
            "        Welcome to my awesome homepage.",
            "    </p>",
            "{% endblock %}"
        ],
        "description": "Jinja Child Template"
    },
    // Block Nesting and Scope
    "jinja Block Nesting and Scope": {
        "prefix": "j.block-nesting",
        "body": [
            "{% for item in seq %}",
            "    <li>{% block loop_item scoped %}{{ item }}{% endblock %}</li>",
            "{% endfor %}"
        ],
        "description": "Jinja Block Nesting and Scope"
    },
    // basic elemtns
    "jinja Statements": {
        "prefix": "j.stat",
        "body": [
            "{% ${1:statement} %}",
            "\t$2",
            "{% end${1:statement} %}$0",
        ],
        "description": "statements {% ... %}"
    },
    "jinja Expressions": {
        "prefix": [
            "j.exp, j.print"
        ],
        "body": [
            "{{ $1 }}$0"
        ],
        "description": "expressions {{ ... }}"
    },
    "jinja Comments": {
        "prefix": "j.comm",
        "body": [
            "{# ${1:comments} #}$0",
        ],
        "description": "comments {# ... #}"
    },
    "jinja block": {
        "prefix": "j.block",
        "body": [
            "{% block ${1:name} %}",
            "\t$2",
            "{% endblock %}$0"
        ],
        "description": "define blocks for templates"
    },
    // if statements
    "jinja if": {
        "prefix": "j.if",
        "body": [
            "{% if ${1:condition} %}",
            "\t$2",
            "{% endif %}$0"
        ],
        "description": "if statement"
    },
    "jinja if-else": {
        "prefix": "j.if-else",
        "body": [
            "{% if ${1:condition} %}",
            "\t$2",
            "{% else %}",
            "\t$3",
            "{% endif %}$0"
        ],
        "description": "if and else statement"
    },
    "jinja if-elif-else": {
        "prefix": "j.if-elif-else",
        "body": [
            "{% if ${1:condition} %}",
            "\t$2",
            "{% elif ${3:condition2} %}",
            "\t$4",
            "{% else %}",
            "\t$5",
            "{% endif %}$0"
        ],
        "description": "if, elif and else statement"
    },
    "jinja if-for": {
        "prefix": "j.if-for",
        "body": [
            "{% if ${1:iterable} %}",
            "\t{% for ${2:item} in ${1:iterable} %}",
            "\t\t$3",
            "\t{% endfor %}",
            "{% endif %}$0"
        ],
        "description": "for loop in a if statement"
    },
    // for statements
    "jinja for": {
        "prefix": "j.for",
        "body": [
            "{% for ${1:item} in ${2:iterable} %}",
            "\t$3",
            "{% endfor %}$0"
        ],
        "description": "for statements"
    },
    "jinja for-if": {
        "prefix": "j.for-if",
        "body": [
            "{% for ${1:item} in ${2:iterable} %}",
            "\t{% if ${1:item} %}",
            "\t\t$3",
            "\t{% endif %}",
            "{% endfor %}$0"
        ],
        "description": "if statement in a for loop"
    },
    "jinja for-else": {
        "prefix": "j.for-else",
        "body": [
            "{% for ${1:item} in ${2:iterable} %}",
            "\t$3",
            "{% else %}",
            "\t$4",
            "{% endfor %}$0"
        ],
        "description": "else break statement in a for loop"
    },
    // with Statement
    "jinja with": {
        "prefix": "j.with",
        "body": [
            "{% with ${1:item}  %}",
            "\t$2",
            "{% endwith %}$0"
        ],
        "description": "with statements"
    },
    // macros
    "jinja macro": {
        "prefix": "j.macro",
        "body": [
            "{% macro ${1:name}(${2:args}) %}",
            "\t$3",
            "{% endmacro %}$0"
        ],
        "description": "define macro | function"
    },
    // call
    "jinja call": {
        "prefix": "j.call",
        "body": [
            "{% call ${1:macroname}(${2:args}) %}",
            "\t$3",
            "{% endcall %}$0"
        ],
        "description": "call functionality for macro | function"
    },
    // filters
    "jinja filter": {
        "prefix": "j.filter",
        "body": [
            "{% filter ${1:filtername} %}",
            "\t$2",
            "{% endfilter %}$0"
        ],
        "description": "apply regular jinja filters"
    },
    // includes
    "jinja include": {
        "prefix": "j.incl",
        "body": [
            "{% include '${1:filename}' ${2| ,ignore missing,with context,ignore missing with context|} %}$0"
        ],
        "description": "include a template into the current namespace. Tabstops Choice: ignore missing, with context, ignore missing with context"
    },
    // extends
    "jinja extends": {
        "prefix": "j.extends",
        "body": [
            "{% extends '${1:filename}' %}$0"
        ],
        "description": "template inheritance"
    },
    // imports
    "jinja import": {
        "prefix": "j.imp",
        "body": [
            "{% import '${1:filename}' ${2| , with context|} %}$0"
        ],
        "description": "import module into current namespace. Tabstops Choice: with context"
    },
    "jinja from import": {
        "prefix": "j.imp-from",
        "body": [
            "{% from '${1:template}' import '${2:module}' ${3| , with context|} %}$0"
        ],
        "description": "import specific names from a template into the current namespace. Tabstops Choice: with context"
    },
    // assignments
    "jinja set": {
        "prefix": "j.set",
        "body": [
            "{% set ${1:variable} = ${2:value} %}$0"
        ],
        "description": "assign value to variable"
    },
    "jinja set multiple": {
        "prefix": "j.setmulti",
        "body": [
            "{% set ${1:key}, ${2:value} = ${3:callable()} %}$0"
        ],
        "description": "assign key, value returned by a callable"
    },
    "jinja set block": {
        "prefix": "j.setblock",
        "body": [
            "{% set ${1:variable} %}",
            "\t${2:contents}",
            "{% endset %}$0",
        ],
        "description": "block assignments: capture the contents of block into variable"
    },
    // lorem ipsum
    "jinja lipsum": {
        "prefix": [
            "j.lipsum",
            "j.lorem"
        ],
        "body": [
            "{{ lipsum(n=${1:5}, html=${2:True}, min=${3:20}, max=${4:100}) }}$0",
        ],
        "description": "generate some lorem ipsum."
    },
    // randomize
    "jinja random": {
        "prefix": "j.random",
        "body": [
            "{{ range(${1:0}, ${2:10000}, ${3:1}) | random }}$0"
        ],
        "description": "generate random item from a range"
    },
    // url
    "jinja url": {
        "prefix": "j.url",
        "body": [
            "{{ url_for('${1:endpoint}' $2) }}$0"
        ],
        "description": "generate url for endpoint"
    },
    // static
    "jinja static": {
        "prefix": "j.static",
        "body": [
            "{{ url_for('static', filename='${1:filename}') }}$0"
        ],
        "description": "generate url for static file"
    },
    // block super
    "jinja block super": {
        "prefix": "j.block-super",
        "body": [
            "{{ super() }}$0"
        ],
        "description": "call the parent block"
    },
    // block parent
    "jinja block parent": {
        "prefix": "j.block-parent",
        "body": [
            "{% block ${1:name} %}",
            "\t{{ parent() }}",
            "{% endblock %}$0"
        ],
        "description": "call the parent block"
    },
    // block include
    "jinja block include": {
        "prefix": "j.block-include",
        "body": [
            "{% include '${1:filename}' %}$0"
        ],
        "description": "include a block from another template"
    },
    // block extends
    "jinja block extends": {
        "prefix": "j.block-extends",
        "body": [
            "{% extends '${1:filename}' %}$0"
        ],
        "description": "extend a block from another template"
    },
    // block import
    "jinja block import": {
        "prefix": "j.block-import",
        "body": [
            "{% import '${1:filename}' %}$0"
        ],
        "description": "import a block from another template"
    },
    // block from import
    "jinja block from import": {
        "prefix": "j.block-from-import",
        "body": [
            "{% from '${1:template}' import '${2:module}' %}$0"
        ],
        "description": "import a block from another template"
    },
    // block set
    "jinja block set": {
        "prefix": "j.block-set",
        "body": [
            "{% set ${1:variable} = ${2:value} %}$0"
        ],
        "description": "assign value to variable"
    },
    // block set block
    "jinja block set block": {
        "prefix": "j.block-set-block",
        "body": [
            "{% set ${1:variable} %}",
            "\t${2:contents}",
            "{% endset %}$0",
        ],
        "description": "block assignments: capture the contents of block into variable"
    },
    // block with
    "jinja block with": {
        "prefix": "j.block-with",
        "body": [
            "{% with ${1:item}  %}",
            "\t$2",
            "{% endwith %}$0"
        ],
        "description": "with statements"
    },
    // block call
    "jinja block call": {
        "prefix": "j.block-call",
        "body": [
            "{% call ${1:macroname}(${2:args}) %}",
            "\t$3",
            "{% endcall %}$0"
        ],
        "description": "call functionality for macro | function"
    },
    // block filter
    "jinja block filter": {
        "prefix": "j.block-filter",
        "body": [
            "{% filter ${1:filtername} %}",
            "\t$2",
            "{% endfilter %}$0"
        ],
        "description": "apply regular jinja filters"
    },
    // block if
    "jinja block if": {
        "prefix": "j.block-if",
        "body": [
            "{% if ${1:condition} %}",
            "\t$2",
            "{% endif %}$0"
        ],
        "description": "if statement"
    },
    // block if-else
    "jinja block if-else": {
        "prefix": "j.block-if-else",
        "body": [
            "{% if ${1:condition} %}",
            "\t$2",
            "{% else %}",
            "\t$3",
            "{% endif %}$0"
        ],
        "description": "if and else statement"
    },
    // raw block
    "jinja raw": {
        "prefix": "j.raw",
        "body": [
            "{% raw %}",
            "\t$1",
            "{% endraw %}$0"
        ],
        "description": "Include raw content without processing"
    },
    // if-elif statements
    "jinja if-elif": {
        "prefix": "j.if-elif",
        "body": [
            "{% if ${1:condition} %}",
            "\t$2",
            "{% elif ${3:condition2} %}",
            "\t$4",
            "{% endif %}$0"
        ],
        "description": "if and elif statement"
    },
    // filter chain
    "jinja filter-chain": {
        "prefix": "j.filter-chain",
        "body": [
            "{{ ${1:variable} | ${2:firstFilter} | ${3:secondFilter} }}$0"
        ],
        "description": "Apply a chain of filters to a variable"
    },
    // include with only
    "jinja include-only": {
        "prefix": "j.incl-only",
        "body": [
            "{% include '${1:filename}' with ${2:variable} only %}$0"
        ],
        "description": "Include a template with specified variables only"
    },
    // autoescape block
    "jinja autoescape": {
        "prefix": "j.autoescape",
        "body": [
            "{% autoescape ${1:true|false} %}",
            "\t$2",
            "{% endautoescape %}$0"
        ],
        "description": "Enable or disable autoescaping for a block"
    },
    // if not statement
    "jinja if-not": {
        "prefix": "j.if-not",
        "body": [
            "{% if not ${1:condition} %}",
            "\t$2",
            "{% endif %}$0"
        ],
        "description": "if not statement"
    },
    // cycle block
    "jinja cycle": {
        "prefix": "j.cycle",
        "body": [
            "{% cycle ${1:value1}, ${2:value2} as ${3:cycleName} %}$0"
        ],
        "description": "Cycle through values in a block"
    },
    // if and filter combination
    "jinja if-filter": {
        "prefix": "j.if-filter",
        "body": [
            "{% if ${1:condition} | ${2:filter} %}",
            "\t$3",
            "{% endif %}$0"
        ],
        "description": "if statement with a filter applied"
    },
    // if not and filter combination
    "jinja if-not-filter": {
        "prefix": "j.if-not-filter",
        "body": [
            "{% if not ${1:condition} | ${2:filter} %}",
            "\t$3",
            "{% endif %}$0"
        ],
        "description": "if not statement with a filter applied"
    },
    // if-elif-else statements with filters
    "jinja if-elif-else-filter": {
        "prefix": "j.if-elif-else-filter",
        "body": [
            "{% if ${1:condition} | ${2:firstFilter} %}",
            "\t$3",
            "{% elif ${4:condition2} | ${5:secondFilter} %}",
            "\t$6",
            "{% else %}",
            "\t$7",
            "{% endif %}$0"
        ],
        "description": "if, elif, and else statement with filters"
    },
    // if-elif-else statements with not filters
    "jinja if-elif-else-not-filter": {
        "prefix": "j.if-elif-else-not-filter",
        "body": [
            "{% if not ${1:condition} | ${2:firstFilter} %}",
            "\t$3",
            "{% elif not ${4:condition2} | ${5:secondFilter} %}",
            "\t$6",
            "{% else %}",
            "\t$7",
            "{% endif %}$0"
        ],
        "description": "if, elif, and else statement with not filters"
    }
}